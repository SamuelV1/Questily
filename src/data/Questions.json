[
    {
        "field1": "Array",
        "question": "Reverse the array",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find the maximum and minimum element in an array",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find the \"Kth\" max and min element of an array ",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Move all the negative elements to one side of the array",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find the Union and Intersection of the two sorted arrays.",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Write a program to cyclically rotate an array by one.",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "find Largest sum contiguous Subarray [V. IMP]",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Minimise the maximum difference between heights [V.IMP]",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Minimum no. of Jumps to reach end of an array",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "find duplicate in an array of N+1 Integers",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Merge 2 sorted arrays without using Extra space.",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Kadane's Algo [V.V.V.V.V IMP]",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Merge Intervals",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Next Permutation",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Count Inversion",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Best time to buy and Sell stock",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "find all pairs on integer array whose sum is equal to given number",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "find common elements In 3 sorted arrays",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Rearrange the array in alternating positive and negative items with O(1) extra space",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find if there is any subarray with sum equal to 0",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find factorial of a large number",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "find maximum product subarray",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find longest coinsecutive subsequence",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Given an array of size n and a number k, fin all elements that appear more than \" n/k \" times.",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Maximum profit by buying and selling a share atmost twice",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find whether an array is a subset of another array",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Find the triplet that sum to a given value",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Trapping Rain water problem",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Chocolate Distribution problem",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Smallest Subarray with sum greater than a given value",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Three way partitioning of an array around a given value",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Minimum swaps required bring elements less equal K together",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Minimum no. of operations required to make an array palindrome",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Median of 2 sorted arrays of equal size",
        "field3": "<->"
    },
    {
        "field1": "Array",
        "question": "Median of 2 sorted arrays of different size",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Spiral traversal on a Matrix",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Search an element in a matriix",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Find median in a row wise sorted matrix",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Find row with maximum no. of 1's",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Print elements in sorted order using row-column wise sorted matrix",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Maximum size rectangle",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Find a specific pair in matrix",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Rotate matrix by 90 degrees",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Kth smallest element in a row-cpumn wise sorted matrix",
        "field3": "<->"
    },
    {
        "field1": "Matrix",
        "question": "Common elements in all rows of a given matrix",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Reverse a String",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Check whether a String is Palindrome or not",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Find Duplicate characters in a string",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Why strings are immutable in Java?",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Write a Code to check whether one string is a rotation of another",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Write a Program to check whether a string is a valid shuffle of two strings or not",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Count and Say problem",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Find Longest Recurring Subsequence in String",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Print all Subsequences of a string.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Print all the permutations of the given string",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Split the Binary string into two substring with equal 0�s and 1�s",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Word Wrap Problem [VERY IMP].",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "EDIT Distance [Very Imp]",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Find next greater number with same set of digits. [Very Very IMP]",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Balanced Parenthesis problem.[Imp]",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Word break Problem[ Very Imp]",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Rabin Karp Algo",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "KMP Algo",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Convert a Sentence into its equivalent mobile numeric keypad sequence.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Minimum number of bracket reversals needed to make an expression balanced.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Count All Palindromic Subsequence in a given String.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Count of number of given string in 2D character array",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Search a Word in a 2D Grid of characters.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Boyer Moore Algorithm for Pattern Searching.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Converting Roman Numerals to Decimal",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Longest Common Prefix",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Number of flips to make binary string alternate",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Find the first repeated word in string.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Minimum number of swaps for bracket balancing.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Find the longest common subsequence between two strings.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Program to generate all possible valid IP addresses from given  string.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Write a program tofind the smallest window that contains all characters of string itself.",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Rearrange characters in a string such that no two adjacent are same",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Minimum characters to be added at front to make string palindrome",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Given a sequence of words, print all anagrams together",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Find the smallest window in a string containing all characters of another string",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Recursively remove all adjacent duplicates",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "String matching where one string contains wildcard characters",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Function to find Number of customers who could not get a computer",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Transform One String to Another using Minimum Number of Given Operation",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Check if two given strings are isomorphic to each other",
        "field3": "<->"
    },
    {
        "field1": "String",
        "question": "Recursively print all sentences that can be formed from list of word lists",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Find first and last positions of an element in a sorted array",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Find a Fixed Point (Value equal to index) in a given array",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Search in a rotated sorted array",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "square root of an integer",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Maximum and minimum of an array using minimum number of comparisons",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Optimum location of point to minimize total distance",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Find the repeating and the missing",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "find majority element",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Searching in an array where adjacent differ by at most k",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "find a pair with a given difference",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "find four elements that sum to a given value",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "maximum sum such that no 2 elements are adjacent",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Count triplet with sum smaller than a given value",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "merge 2 sorted arrays",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "print all subarrays with 0 sum",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Product array Puzzle",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Sort array according to count of set bits",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "minimum no. of swaps required to sort the array",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Bishu and Soldiers",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Rasta and Kheshtak",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Kth smallest number again",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Find pivot element in a sorted array",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "K-th Element of Two Sorted Arrays",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Aggressive cows",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Book Allocation Problem",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "EKOSPOJ:",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Job Scheduling Algo",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Missing Number in AP",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Smallest number with atleastn trailing zeroes infactorial",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Painters Partition Problem:",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "ROTI-Prata SPOJ",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "DoubleHelix SPOJ",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Subset Sums",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Findthe inversion count",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Implement Merge-sort in-place",
        "field3": "<->"
    },
    {
        "field1": "Sorting",
        "question": "Partitioning and Sorting Arrays with Many Repeated Entries",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Write a Program to reverse the Linked List. (Both Iterative and recursive)",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Reverse a Linked List in group of Given Size. [Very Imp]",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Write a program to Detect loop in a linked list.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Write a program to Delete loop in a linked list.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Find the starting point of the loop.�",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Remove Duplicates in a sorted Linked List.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Remove Duplicates in a Un-sorted Linked List.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Write a Program to Move the last element to Front in a Linked List.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Add �1� to a number represented as a Linked List.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Add two numbers represented by linked lists.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Intersection of two Sorted Linked List.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Intersection Point of two Linked Lists.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Merge Sort For Linked lists.[Very Important]",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Quicksort for Linked Lists.[Very Important]",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Find the middle Element of a linked list.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Check if a linked list is a circular linked list.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Split a Circular linked list into two halves.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Write a Program to check whether the Singly Linked list is a palindrome or not.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Deletion from a Circular Linked List.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Reverse a Doubly Linked list.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Find pairs with a given sum in a DLL.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Count triplets in a sorted DLL whose sum is equal to given value �X�.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Sort a �k�sorted Doubly Linked list.[Very IMP]",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Rotate DoublyLinked list by N nodes.",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Rotate a Doubly Linked list in group of Given Size.[Very IMP]",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Can we reverse a linked list in less than O(n) ?",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Flatten a Linked List",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Sort a LL of 0's, 1's and 2's",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Clone a linked list with next and random pointer",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Merge K sorted Linked list",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Multiply 2 no. represented by LL",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Delete nodes which have a greater value on right side",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Segregate even and odd nodes in a Linked List",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Program for n�th node from the end of a Linked List",
        "field3": "<->"
    },
    {
        "field1": "LinkedList",
        "question": "Find the first non-repeating character from a stream of characters",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "level order traversal",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Reverse Level Order traversal",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Height of a tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Diameter of a tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Mirror of a tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Inorder Traversal of a tree both using recursion and Iteration",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Preorder Traversal of a tree both using recursion and Iteration",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Postorder Traversal of a tree both using recursion and Iteration",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Left View of a tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Right View of Tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Top View of a tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Bottom View of a tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Zig-Zag traversal of a binary tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check if a tree is balanced or not",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Diagnol Traversal of a Binary tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Boundary traversal of a Binary tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Construct Binary Tree from String with Bracket Representation",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Convert Binary tree into Doubly Linked List",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Convert Binary tree into Sum tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Construct Binary tree from Inorder and preorder traversal",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find minimum swaps required to convert a Binary tree into BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check if Binary tree is Sum tree or not",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check if all leaf nodes are at same level or not",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check if 2 trees are mirror or not",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Sum of Nodes on the Longest path from root to leaf node",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check if given graph is tree or not.  [ IMP ]",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find Largest subtree sum in a tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Maximum Sum of nodes in Binary tree such that no two are adjacent",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Print all \"K\" Sum paths in a Binary tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find LCA in a Binary tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find distance between 2 nodes in a Binary tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Kth Ancestor of node in a Binary tree",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find all Duplicate subtrees in a Binary tree [ IMP ]",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Tree Isomorphism Problem",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Fina a value in a BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Deletion of a node in a BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find min and max value in a BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find inorder successor and inorder predecessor in a BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check if a tree is a BST or not",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Populate Inorder successor of all nodes",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find LCA  of 2 nodes in a BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Construct BST from preorder traversal",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Convert Binary tree into BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Convert a normal BST into a Balanced BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Merge two BST [ V.V.V>IMP ]",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find Kth largest element in a BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find Kth smallest element in a BST",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Count pairs from 2 BST whose sum is equal to given value \"X\"",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Find the median of BST in O(n) time and O(1) space",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Count BST ndoes that lie in a given range",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Replace every element with the least greater element on its right",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Given \"n\" appointments, find the conflicting appointments",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check preorder is valid or not",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Check whether BST contains Dead end",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Largest BST in a Binary Tree [ V.V.V.V.V IMP ]",
        "field3": "<->"
    },
    {
        "field1": "BinaryTrees",
        "question": "Flatten BST to sorted list",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Activity Selection Problem",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Job SequencingProblem",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Huffman Coding",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Water Connection Problem",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Fractional Knapsack Problem",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Greedy Algorithm to find Minimum number of Coins",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Maximum trains for which stoppage can be provided",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Minimum Platforms Problem",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Buy Maximum Stocks if i stocks can be bought on i-th day",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Find the minimum and maximum amount to buy all N candies",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Minimize Cash Flow among a given set of friends who have borrowed money from each other",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Minimum Cost to cut a board into squares",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Check if it is possible to survive on Island",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Find maximum meetings in one room",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Maximum product subset of an array",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Maximize array sum after K negations",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Maximize the sum of arr[i]*i",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Maximum sum of absolute difference of an array",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Maximize sum of consecutive differences in a circular array",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Minimum sum of absolute difference of pairs of two arrays",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Program for Shortest Job First (or SJF) CPU Scheduling",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Program for Least Recently Used (LRU) Page Replacement algorithm",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Smallest subset with sum greater than all other elements",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Chocolate Distribution Problem",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "DEFKIN -Defense of a Kingdom",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "DIEHARD -DIE HARD",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "GERGOVIA -Wine trading in Gergovia",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Picking Up Chicks",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "CHOCOLA �Chocolate",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "ARRANGE -Arranging Amplifiers",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "K Centers Problem",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Minimum Cost of ropes",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Find smallest number with given number of digits and sum of digits",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Rearrange characters in a string such that no two adjacent are same",
        "field3": "<->"
    },
    {
        "field1": "Greedy",
        "question": "Find maximum sum possible equal sum of three stacks",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Rat in a maze Problem",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Printing all solutions in N-Queen Problem",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Word Break Problem using Backtracking",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Remove Invalid Parentheses",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Sudoku Solver",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "m Coloring Problem",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Print all palindromic partitions of a string",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Subset Sum Problem",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "The Knight�s tour problem",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Tug of War",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Find shortest safe route in a path with landmines",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Combinational Sum",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Find Maximum number possible by doing at-most K swaps",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Print all permutations of a string",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Find if there is a path of more than k length from a source",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Longest Possible Route in a Matrix with Hurdles",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Print all possible paths from top left to bottom right of a mXn matrix",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Partition of a set intoK subsets with equal sum",
        "field3": "<->"
    },
    {
        "field1": "BackTracking",
        "question": "Find the K-th Permutation Sequence of first N natural numbers",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement Stack from Scratch",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement Queue from Scratch",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement 2 stack in an array",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "find the middle element of a stack",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement \"N\" stacks in an Array",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Check the expression has valid or Balanced parenthesis or not.",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Reverse a String using Stack",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Design a Stack that supports getMin() in O(1) time and O(1) extra space.",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Find the next Greater element",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "The celebrity Problem",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Arithmetic Expression evaluation",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Evaluation of Postfix expression",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement a method to insert an element at its bottom without using any other data structure.",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Reverse a stack using recursion",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Sort a Stack using recursion",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Merge Overlapping Intervals",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Largest rectangular Area in Histogram",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Length of the Longest Valid Substring",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Expression contains redundant bracket or not",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement Stack using Queue",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement Stack using Deque",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Stack Permutations (Check if an array is stack permutation of other)",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement Queue using Stack",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement \"n\" queue in an array",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Implement a Circular queue",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "LRU Cache Implementationa",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Reverse a Queue using recursion",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Reverse the first �K� elements of a queue",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Interleave the first half of the queue with second half",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Find the first circular tour that visits all Petrol Pumps",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Minimum time required to rot all oranges",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Distance of nearest cell having 1 in a binary matrix",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "First negative integer in every window of size �k�",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Check if all levels of two trees are anagrams or not.",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Sum of minimum and maximum elements of all subarrays of size �k�.",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Minimum sum of squares of character counts in a given string after removing �k� characters.",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Queue based approach or first non-repeating character in a stream.",
        "field3": "<->"
    },
    {
        "field1": "Stacks",
        "question": "Next Smaller Element",
        "field3": "<->"
    },
    {
        "field1": "Heap",
        "question": "Convert BST to Min Heap",
        "field3": "<->"
    },
    {
        "field1": "Heap",
        "question": "Convert min heap to max heap",
        "field3": "<->"
    },
    {
        "field1": "Heap",
        "question": "Rearrange characters in a string such that no two adjacent are same.",
        "field3": "<->"
    },
    {
        "field1": "Heap",
        "question": "Minimum sum of two numbers formed from digits of an array",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Create a Graph, print it",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Implement BFS algorithm",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Implement DFS Algo",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Detect Cycle in Directed Graph using BFS/DFS Algo",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Detect Cycle in UnDirected Graph using BFS/DFS Algo",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Search in a Maze",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Minimum Step by Knight",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "flood fill algo",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Clone a graph",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Making wired Connections",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "word Ladder",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Dijkstra algo",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Implement Topological Sort",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Minimum time taken by each job to be completed given by a Directed Acyclic Graph",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Find whether it is possible to finish all tasks or not from given dependencies",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Find the no. of Isalnds",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Given a sorted Dictionary of an Alien Language, find order of characters",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Implement Kruksal�sAlgorithm",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Implement Prim�s Algorithm",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Total no. of Spanning tree in a graph",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Implement Bellman Ford Algorithm",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Implement Floyd warshallAlgorithm",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Travelling Salesman Problem",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Graph ColouringProblem",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Snake and Ladders Problem",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Find bridge in a graph",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Count Strongly connected Components(Kosaraju Algo)",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Check whether a graph is Bipartite or Not",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Detect Negative cycle in a graph",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Longest path in a Directed Acyclic Graph",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Journey to the Moon",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Cheapest Flights Within K Stops",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Oliver and the Game",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Water Jug problem using BFS",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Water Jug problem using BFS",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Find if there is a path of more thank length from a source",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "M-ColouringProblem",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Minimum edges to reverse o make path from source to destination",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Paths to travel each nodes using each edge(Seven Bridges)",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Vertex Cover Problem",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Chinese Postman or Route Inspection",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Number of Triangles in a Directed and Undirected Graph",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Minimise the cashflow among a given set of friends who have borrowed money from each other",
        "field3": "<->"
    },
    {
        "field1": "Graph",
        "question": "Two Clique Problem",
        "field3": "<->"
    }
]
